unit Синтез__модели;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls;

type
  TSintez = class(TForm)
    Функции_Кнопка: TButton;
    Алгоритмы_: TButton;
    Команды_: TButton;
    Входы_: TButton;
    Таймеры_: TButton;
    procedure Входы_Click(Sender: TObject);
    procedure Команды_Click(Sender: TObject);
    procedure Функции_КнопкаClick(Sender: TObject);
    procedure Алгоритмы_Click(Sender: TObject);
    procedure Таймеры_Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
//    procedure СозданиеТаймеровClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }

  end;
type Выбрать = (Действие,Условие,Переход,Подпрограмма,Подпрограмма_без_параметров,Таймер,Метка,Нач,Кон,Ком,Нет_выбора);
var
    Sintez: TSintez;
    ФС,Входы,Команды,Функции_Техническое_задание,Функции_Вычисления_без_фронтов_и_алгоритмов, Функции_Вычисления,
    Алгоритмы,Алгоритмы__,Входы__,Команды__,
    Запуск_алгоритмов,
    Переменные_функций,Переменные_алгоритмов,
    Переменные_Запуск_алгоритмов,
    OBN_FR_HH,Сигналы_срабатывания_таймеров,Таймеры,Объявления_Таймеров,Создание_Таймеров,Обработчики_событий_Таймеров:textfile;
    Номер_входа,Номер_символа,Длина_имени:Integer;
    Исходная_строка, Выходная_строка,Имя_входа,Состояние,Имя_функции,Имя_алгоритма,Формула,Имя_Таймера,Сигнал_срабатывания_таймера,Имя,Переменные_: String;
    Сост,Команды_выполнены,Алгоритмы_выполнены,Блоки_выполнены,Входы_поданы,Есть_переключения:Boolean;
    Процесс_,Шаг_,Ранг,Контролируемый_процесс,Блок:Integer;
    Назначение,Комментарий,Имя_метки,Имя_параметра:String;
    Выбор:Выбрать;
    Резиденцмя_Итерационное_моделирование:String;
    Резиденцмя_Гиперсистема:String;
    Резиденцмя_Предметные_конструкции_модели:String;
implementation

{$R *.dfm}

procedure TSintez.FormCreate(Sender: TObject);
begin
  GetDir(0,Резиденцмя_Гиперсистема);
  Резиденцмя_Гиперсистема := StringReplace(Резиденцмя_Гиперсистема,'\__history' , '', [rfReplaceAll, rfIgnoreCase]);
  ShowMessage('Резиденцмя_Гиперсистема: ' + Резиденцмя_Гиперсистема);
  Резиденцмя_Предметные_конструкции_модели:= Резиденцмя_Гиперсистема + '\Предметные конструкции модели';
  ShowMessage('Резиденцмя_Предметные_конструкции_модели: ' + Резиденцмя_Предметные_конструкции_модели);
  Резиденцмя_Итерационное_моделирование := Резиденцмя_Гиперсистема + '\Проекты\Итерационное моделирование';
  ShowMessage('Резиденцмя_Итерационное_моделирование: ' + Резиденцмя_Итерационное_моделирование);
end;

procedure TSintez.Таймеры_Click(Sender: TObject);
begin
       // Преобразование  Таймеры
// Синтаксический контроль
//  if not FileExists('d:\Гиперсистема\Предметные конструкции модели\Таймеры.txt') then ShowMessage('Нет файла Таймеры!');

  AssignFile(Таймеры,Резиденцмя_Предметные_конструкции_модели + '\Таймеры.txt');
  AssignFile(Обработчики_событий_Таймеров, Резиденцмя_Итерационное_моделирование + '\Обработчики_событий_Таймеров.pas');
  AssignFile(Объявления_Таймеров,Резиденцмя_Итерационное_моделирование +  '\Объявления_Таймеров.pas');
  AssignFile(Создание_Таймеров,Резиденцмя_Итерационное_моделирование +  '\Создание_Таймеров.pas');
  ReSet(Таймеры);
  ReWrite(Объявления_Таймеров);
  ReWrite(Обработчики_событий_Таймеров);
  ReWrite(Создание_Таймеров);

//  Номер_входа := 0;
  while not Eof(Таймеры) do
    Begin
    Readln(Таймеры,Исходная_строка);
    Исходная_строка := AnsiUpperCase(Исходная_строка);
    Номер_символа := 1;
    while Номер_символа <> 0 do
    Begin
      Номер_символа := Pos(' ',Исходная_строка);
      Delete(Исходная_строка,Номер_символа,1);
    End;
    Длина_имени := Pos('=',Исходная_строка);
    Имя_Таймера := Copy(Исходная_строка,1,Длина_имени - 1);
    Выходная_строка := Имя_Таймера + ':Ttimer;';
    Writeln(Объявления_Таймеров,Выходная_строка);
  End;
  CloseFile(Таймеры);
  ReSet(Таймеры);
while not Eof(Таймеры) do
    Begin
    Readln(Таймеры,Исходная_строка);
    Исходная_строка := AnsiUpperCase(Исходная_строка);
    Номер_символа := 1;
    while Номер_символа <> 0 do
    Begin
      Номер_символа := Pos(' ',Исходная_строка);
      Delete(Исходная_строка,Номер_символа,1);
    End;
    Длина_имени := Pos('=',Исходная_строка);
    Имя_Таймера := Copy(Исходная_строка,1,Длина_имени - 1);
    Выходная_строка := 'Procedure ' + Имя_Таймера + 'Timer(Sender: TObject);';
    Writeln(Объявления_Таймеров,Выходная_строка);
  End;
  CloseFile(Таймеры);
  ReSet(Таймеры);
  Writeln(Создание_Таймеров,'Procedure TMainForm.СозданиеТаймеровClick(Sender: TObject);');
  Writeln(Создание_Таймеров,'Begin');
  while not Eof(Таймеры) do
    Begin
    Readln(Таймеры,Исходная_строка);
    Исходная_строка := AnsiUpperCase(Исходная_строка);
    Номер_символа := 1;
    while Номер_символа <> 0 do
    Begin
      Номер_символа := Pos(' ',Исходная_строка);
      Delete(Исходная_строка,Номер_символа,1);
    End;
    Длина_имени := Pos('=',Исходная_строка);
    Имя_Таймера := Copy(Исходная_строка,1,Длина_имени - 1);
    Writeln(Создание_Таймеров,Имя_Таймера + ':= Ttimer.Create(MainForm);');
    Writeln(Создание_Таймеров,Имя_Таймера + '.Enabled  := False;');
    Writeln(Создание_Таймеров,Имя_Таймера + '.OnTimer := ' + Имя_Таймера + 'Timer;');
  End;
  Writeln(Создание_Таймеров,'End;');
  //procedure TForm2.Button1Click(Sender: TObject);
//
//begin
//  Таймер:=Ttimer.Create(Form2);
//  Таймер.Enabled := False;
//  Таймер.OnTimer:=ТаймерTimer;
//end;
  CloseFile(Таймеры);
  CloseFile(Создание_Таймеров);
  ReSet(Таймеры);
while not Eof(Таймеры) do
    Begin
    Readln(Таймеры,Исходная_строка);
    Исходная_строка := AnsiUpperCase(Исходная_строка);
    Номер_символа := 1;
    while Номер_символа <> 0 do
    Begin
      Номер_символа := Pos(' ',Исходная_строка);
      Delete(Исходная_строка,Номер_символа,1);
    End;
    Длина_имени := Pos('=',Исходная_строка);
    Имя_Таймера := Copy(Исходная_строка,1,Длина_имени - 1);
    Имя := 'Таймер ' + Copy(Исходная_строка,1,Длина_имени - 1);
    Сигнал_срабатывания_таймера := Copy(Исходная_строка,Длина_имени + 1,Length(Исходная_строка) - Длина_имени);
    Выходная_строка := 'Procedure TMainForm.' + Имя_Таймера + 'Timer(Sender: TObject);';
    Writeln(Обработчики_событий_Таймеров,Выходная_строка);
    Writeln(Обработчики_событий_Таймеров,'Begin');
    Выходная_строка := 'MainForm.ListBox3.Items.Add(Pr(Ранг)' + '+' + '''' + Имя + ' Сработал!'');';
//    MainForm.ListBox3.Items.Add(Pr(Ранг) + ТРНСО.Name + ' Сработал!');
    Writeln(Обработчики_событий_Таймеров,Выходная_строка);
    Writeln(Обработчики_событий_Таймеров,Сигнал_срабатывания_таймера + ':= True;');
    Writeln(Обработчики_событий_Таймеров,'Есть_переключения := false;');
    Writeln(Обработчики_событий_Таймеров,'Repeat');
    Writeln(Обработчики_событий_Таймеров,'Переключения;');
    Writeln(Обработчики_событий_Таймеров,'until not Есть_переключения;');
    Writeln(Обработчики_событий_Таймеров,'Алгоритм;');
    Writeln(Обработчики_событий_Таймеров,Сигнал_срабатывания_таймера + ':= False;');
    Writeln(Обработчики_событий_Таймеров,Имя_Таймера + '.Interval := 0;');
    Writeln(Обработчики_событий_Таймеров,Имя_Таймера + '.Enabled:= false;');
    Writeln(Обработчики_событий_Таймеров,'Есть_переключения := false;');
    Writeln(Обработчики_событий_Таймеров,'Repeat');
    Writeln(Обработчики_событий_Таймеров,'Переключения;');
    Writeln(Обработчики_событий_Таймеров,'until not Есть_переключения;');
    Writeln(Обработчики_событий_Таймеров,'end;');
  End;

  ShowMessage('Преобразованы Таймеры!');
  CloseFile(Таймеры);
  CloseFile(Объявления_Таймеров);
  CloseFile(Обработчики_событий_Таймеров);
//  СозданиеТаймеровClick(Sender);
end;
procedure TSintez.Команды_Click(Sender: TObject);
begin
// Преобразование  Команды
// Синтаксический контроль
//  if not FileExists('d:\Гиперсистема\Предметные конструкции модели\Команды.txt') then ShowMessage('Нет файла Команды!');
  AssignFile(Команды, Резиденцмя_Предметные_конструкции_модели + '\Команды.txt');
  AssignFile(Команды__,Резиденцмя_Итерационное_моделирование +  '\Команды__.pas');
  ReSet(Команды);
  ReWrite(Команды__);
  Номер_входа := 0;
  while not Eof(Команды) do
    Begin
    Номер_входа := Номер_входа + 1;
    Readln(Команды,Исходная_строка);
    Исходная_строка := AnsiUpperCase(Исходная_строка);
    Номер_символа := 1;
    while Номер_символа <> 0 do
    Begin
      Номер_символа := Pos(' ',Исходная_строка);
      Delete(Исходная_строка,Номер_символа,1);
    End;
    Длина_имени := Pos('=',Исходная_строка);
    Имя_входа := Copy(Исходная_строка,1,Длина_имени - 1);
    Состояние := Copy(Исходная_строка,Длина_имени + 1,1);
    Выходная_строка := IntToStr(Номер_входа) + ': Команда(' + Имя_входа + ','
                    + Состояние + ',''' + Имя_входа + ' = '',0);';
    Writeln(Команды__,Выходная_строка);
  End;
    ShowMessage('Преобразованы  Команды!!');
    CloseFile(Команды);
    CloseFile(Команды__);
end;


procedure TSintez.Входы_Click(Sender: TObject);
begin
// Преобразование  Входы
// Синтаксический контроль
//  if not FileExists('d:\Гиперсистема\Предметные конструкции модели\Входы.txt') then ShowMessage('Нет файла Входы!');
  AssignFile(Входы, Резиденцмя_Предметные_конструкции_модели + '\Входы.txt');
  AssignFile(Входы__, Резиденцмя_Итерационное_моделирование + '\Входы__.pas');
  ReSet(Входы);
  ReWrite(Входы__);
  Номер_входа := 0;
  while not Eof(Входы) do
    Begin
    Номер_входа := Номер_входа + 1;
    Readln(Входы,Исходная_строка);
    Исходная_строка := AnsiUpperCase(Исходная_строка);
    Номер_символа := 1;
    while Номер_символа <> 0 do
    Begin
      Номер_символа := Pos(' ',Исходная_строка);
      Delete(Исходная_строка,Номер_символа,1);
    End;
    Длина_имени := Pos('=',Исходная_строка);
    Имя_входа := Copy(Исходная_строка,1,Длина_имени - 1);
    Состояние := Copy(Исходная_строка,Длина_имени + 1,1);
    Выходная_строка := IntToStr(Номер_входа) + ': Вход(' + Имя_входа + ','
                    + Состояние + ',''' + Имя_входа + ' = '',0);';
    Writeln(Входы__,Выходная_строка);
  End;
    ShowMessage('Преобразованы  Входы!!');
    CloseFile(Входы);
    CloseFile(Входы__);
end;

procedure TSintez.Функции_КнопкаClick(Sender: TObject);
begin
// Преобразование  Функции
// Синтаксический контроль
//  if not FileExists('d:\Гиперсистема\Предметные конструкции модели\Функции.txt') then ShowMessage('Нет файла Функции!');
  AssignFile(Функции_Техническое_задание,Резиденцмя_Предметные_конструкции_модели +  '\Функции.txt');
  AssignFile(Функции_Вычисления_без_фронтов_и_алгоритмов,Резиденцмя_Итерационное_моделирование +  '\Функции_Вычисления_без_фронтов_и_алгоритмов.pas');
  ReSet(Функции_Техническое_задание);
  ReWrite(Функции_Вычисления_без_фронтов_и_алгоритмов);
  AssignFile(Переменные_функций,Резиденцмя_Итерационное_моделирование +  '\Переменные_функций.pas');
  ReWrite(Переменные_функций);
  AssignFile(Команды, Резиденцмя_Предметные_конструкции_модели + '\Команды.txt');
  ReWrite(Команды);
  AssignFile(Входы, Резиденцмя_Предметные_конструкции_модели + '\Входы.txt');
  ReWrite(Входы);
  Переменные_ := '';
// Начало Объединение повторяюшихся функций (развртвленные шины питания!)
//   while not Eof(Функции_Техническое_задание) do
//  Begin
//    Readln(Функции_Техническое_задание,Исходная_строка);
//
//    Исходная_строка := AnsiUpperCase(Исходная_строка);
//  End;
// Конец Объединение повторяюшихся функций (развртвленные шины питания!)
  while not Eof(Функции_Техническое_задание) do
  Begin
    Readln(Функции_Техническое_задание,Исходная_строка);

    Исходная_строка := AnsiUpperCase(Исходная_строка);
    Номер_символа := 1;
    while Номер_символа <> 0 do
      Begin
        Номер_символа := Pos(' ',Исходная_строка);
        Delete(Исходная_строка,Номер_символа,1);
      End;

    if Pos('*',Исходная_строка) <> 0 then
      Begin
      Номер_символа := 1;
      while Номер_символа <> 0 do
          Begin
            Номер_символа := Pos('*',Исходная_строка);
            if Pos('*',Исходная_строка) = 0 then  break;
            Delete(Исходная_строка,Номер_символа,1);
            Insert(' And ',Исходная_строка,Номер_символа);
          End;
      End;

    if Pos('+',Исходная_строка) <> 0 then
      Begin
      Номер_символа := 1;
      while Номер_символа <> 0 do
        Begin
          Номер_символа := Pos('+',Исходная_строка);
          if Pos('+',Исходная_строка) = 0 then  break;
          Delete(Исходная_строка,Номер_символа,1);
          Insert(' Or ',Исходная_строка,Номер_символа);
        End;
      End;

    if Pos('^',Исходная_строка) <> 0 then
      Begin
      Номер_символа := 1;
      while Номер_символа <> 0 do
        Begin
          Номер_символа := Pos('^',Исходная_строка);
          if Pos('^',Исходная_строка) = 0 then  break;
          Delete(Исходная_строка,Номер_символа,1);
          Insert(' Not ',Исходная_строка,Номер_символа);
        End;
      End;

    Длина_имени := Pos('=',Исходная_строка);
    Имя_функции := Copy(Исходная_строка,1,Длина_имени - 1);
    if (Pos(Имя_функции + ',',Переменные_) = 0) or
       ((Pos(Имя_функции + ',',Переменные_) <> 0) and
       (Переменные_[Pos(Имя_функции + ',',Переменные_)-1] <> ',')) then
      Begin
      Переменные_:=Переменные_  + Имя_функции + ',';
      Writeln(Переменные_функций,Имя_функции + ',');
      End;

    Формула := Copy(Исходная_строка,Длина_имени + 1,Length(Исходная_строка) - Длина_имени);
    Исходная_строка := Формула;
    while Pos('And',Формула) <> 0 do
      Begin
      Insert(',',Формула,Pos('And',Формула));
      Delete(Формула,Pos('And',Формула),3);
      End;
    while Pos('Or',Формула) <> 0 do
      Begin
      Insert(',',Формула,Pos('Or',Формула));
      Delete(Формула,Pos('Or',Формула),2);
      End;
    while Pos('Not',Формула) <> 0 do
      Begin
      Insert(',',Формула,Pos('Not',Формула));
      Delete(Формула,Pos('Not',Формула),3);
      End;

     while Pos('(',Формула) <> 0 do
      Begin
      Insert(',',Формула,Pos('(',Формула));
      Delete(Формула,Pos('(',Формула),1);
      End;
    while Pos(')',Формула) <> 0 do
      Begin
      Insert(',',Формула,Pos(')',Формула));
      Delete(Формула,Pos(')',Формула),1);
      End;

    while Pos(' ',Формула) <> 0 do
      Begin
      Delete(Формула,Pos(' ',Формула),1);
      End;

    while Pos(',,',Формула) <> 0 do
      Begin
      Delete(Формула,Pos(',,',Формула),1);
      End;
    while Pos(',,,',Формула) <> 0 do
      Begin
      Delete(Формула,Pos(',,,',Формула),2);
      End;

    if Pos(',',Формула) = 0 then
      Begin
      Имя:= Формула;
//    or (Pos(Имя + ',',Переменные_) = 1)
    if (Pos(',' + Имя + ',',Переменные_) = 0) and (Pos(Имя + ',',Переменные_) = 0) then
      Begin
      Переменные_:=Переменные_  + Имя + ',';
      Writeln(Переменные_функций,Имя + ',');
    If (Pos('X',Имя) = 1) and (Pos('_',Имя) <> 0) then
      Begin
      Writeln(Входы,Имя + '= 1');
      Writeln(Входы,Имя + '= 0');
      End;
      If Pos('H',Имя) = 1  then
      Begin
      Writeln(Команды,Имя + '= 1');
      Writeln(Команды,Имя + '= 0');
      End;
      End;
      End;
    while Pos(',',Формула) <> 0 do
      Begin
      Имя:= Copy(Формула,1,Pos(',',Формула)-1);
      if Pos(Имя + ',',Переменные_) = 0 then
        Begin
          Переменные_:=Переменные_  + Имя + ',';
          If Имя <> '' Then
          Begin
          Writeln(Переменные_функций,Имя + ',');
          If (Pos('Х',Имя) = 1) and (Pos('_',Имя) <> 0)and (Pos(Имя,Исходная_строка) > Pos('=',Исходная_строка)) then
      Begin
      Writeln(Входы,Имя + '= 1');
      Writeln(Входы,Имя + '= 0');
      End;
          If (Pos('H',Имя) = 1) Or (Pos('XРК',Имя) = 1) then
      Begin
      Writeln(Команды,Имя + '= 1');
      Writeln(Команды,Имя + '= 0');
      End;
          End;
          Delete(Формула,1,Pos(',',Формула));
        End
        Else Delete(Формула,1,Pos(',',Формула));
      End;

    Имя:= Формула;
    If (Имя <> '') And (Pos(Имя + ',',Переменные_) = 0) Then
      Begin
        Переменные_ := Переменные_  + Имя + ',';
        Writeln(Переменные_функций,Имя + ',');
          If (Pos('Х',Имя) = 1) and (Pos('_',Имя) <> 0)and (Pos(Имя,Исходная_строка) > Pos('=',Исходная_строка)) then
      Begin
      Writeln(Входы,Имя + '= 1');
      Writeln(Входы,Имя + '= 0');
      End;

        If (Pos('H',Имя) = 1) Or (Pos('XРК',Имя) = 1) then
      Begin
      Writeln(Команды,Имя + '= 1');
      Writeln(Команды,Имя + '= 0');
      End;
      End;
    Выходная_строка := 'Выч(' + Имя_функции + ','
                    + Исходная_строка + ',''' + Имя_функции + ' = '',0);';
    Writeln(Функции_Вычисления_без_фронтов_и_алгоритмов,Выходная_строка);
  End;
    CloseFile(Функции_Техническое_задание);
    CloseFile(Функции_Вычисления_без_фронтов_и_алгоритмов);
    CloseFile(Переменные_функций);
    CloseFile(Команды);
    CloseFile(Входы);
    AssignFile(Функции_Вычисления_без_фронтов_и_алгоритмов,Резиденцмя_Итерационное_моделирование +  '\Функции_Вычисления_без_фронтов_и_алгоритмов.pas');
    Reset(Функции_Вычисления_без_фронтов_и_алгоритмов);
    AssignFile(Запуск_алгоритмов,Резиденцмя_Итерационное_моделирование +  '\Запуск_алгоритмов.pas');
    ReWrite(Запуск_алгоритмов);
    AssignFile(Функции_Вычисления,Резиденцмя_Итерационное_моделирование +  '\Функции_Вычисления.pas');
    Rewrite(Функции_Вычисления);

  while not Eof(Функции_Вычисления_без_фронтов_и_алгоритмов) do
  Begin
    Readln(Функции_Вычисления_без_фронтов_и_алгоритмов,Исходная_строка);
//        ShowMessage(Исходная_строка);
    Длина_имени := Pos(',',Исходная_строка);
    Имя_функции := Copy(Исходная_строка,5,Длина_имени - 5);

    if Pos('__',Исходная_строка) <> 0 then
      Begin
        Имя_функции := Copy(Исходная_строка,7,Pos(',',Исходная_строка) - 7);
//        ShowMessage(Имя_функции);
        Длина_имени := Pos(',',Исходная_строка) - 4;
//        Длина_имени := Length(Имя_функции);
        Формула := Copy(Исходная_строка,Длина_имени + 5,Length(Исходная_строка)-((Длина_имени * 2) + 13));
//        ShowMessage(Формула);
        Writeln(Запуск_алгоритмов,'If (' + Формула + ') and Комплексный_режим' + ' Then ' + Имя_функции + ';');
      End
      else
      begin
    if (Pos(',_' + Имя_функции + ',',Переменные_) <> 0)
      And (Pos(',' + Имя_функции + '_,',Переменные_) <> 0) then
      Begin
        Insert(',_' + Имя_функции + ',' + Имя_функции + '_',Исходная_строка,Pos(');',Исходная_строка));
        Insert('_Пф_Зф',Исходная_строка,Pos('(',Исходная_строка));
      End
      else
      Begin
    if Pos(',_' + Имя_функции + ',',Переменные_) <> 0 then
      Begin
      Insert(',_' + Имя_функции,Исходная_строка,Pos(');',Исходная_строка));
      Insert('_Пф',Исходная_строка,Pos('(',Исходная_строка));
      End;
    if Pos(',' + Имя_функции + '_,',Переменные_) <> 0 then
      Begin
      Insert(',' + Имя_функции + '_',Исходная_строка,Pos(');',Исходная_строка));
      Insert('_Зф',Исходная_строка,Pos('(',Исходная_строка));
      End;
      End;
      Writeln(Функции_Вычисления,Исходная_строка);
      end;
  End;
    CloseFile(Функции_Вычисления_без_фронтов_и_алгоритмов);
    CloseFile(Функции_Вычисления);
    CloseFile(Запуск_алгоритмов);
    ShowMessage('Преобразованы  Функции!');
end;

procedure TSintez.Алгоритмы_Click(Sender: TObject);
begin
// Преобразование  Алгоритмы
// Синтаксический контроль
//  if not FileExists('d:\Гиперсистема\Предметные конструкции модели\Алгоритмы.txt') then ShowMessage('Нет файла Алгоритмы!');
  AssignFile(Алгоритмы, Резиденцмя_Предметные_конструкции_модели + '\Алгоритмы.txt');
  AssignFile(Алгоритмы__,Резиденцмя_Итерационное_моделирование +  '\Алгоритмы__.pas');
  AssignFile(Сигналы_срабатывания_таймеров, Резиденцмя_Предметные_конструкции_модели + '\Сигналы_срабатывания_таймеров.txt');
  ReSet(Алгоритмы);
  ReSet(Сигналы_срабатывания_таймеров);
  ReWrite(Алгоритмы__);
  AssignFile(Переменные_алгоритмов,Резиденцмя_Итерационное_моделирование +  '\Переменные_алгоритмов.pas');
  ReWrite(Переменные_алгоритмов);
  Переменные_ := '';
//  while not Eof(Сигналы_срабатывания_таймеров) do
//  Begin
//    Readln(Сигналы_срабатывания_таймеров,Исходная_строка);
//    Writeln(Переменные_алгоритмов,Исходная_строка + ',');
//  End;
  while not Eof(Алгоритмы) do
  Begin
    Readln(Алгоритмы,Исходная_строка);
    Исходная_строка := AnsiUpperCase(Исходная_строка);
//    ShowMessage(Исходная_строка);
    if Исходная_строка <> '' then
      Begin
    if Pos('НАЧ:',Исходная_строка) <> 0 then
      Begin
        Выбор := Нач;
//        ShowMessage('Нач');
      End;
    if Pos('КОН:',Исходная_строка) <> 0 then
      Begin
        Выбор := Кон;
//        ShowMessage('Кон');
      End;
    if Pos('КОМ:',Исходная_строка) <> 0 then
      Begin
        Выбор := Ком;
//        ShowMessage('Ком');
      End;
    if Pos(':',Исходная_строка) = Length(Исходная_строка) then
      Begin
        Выбор := Метка;
//        ShowMessage('Метка');
      End;
    if Pos('=',Исходная_строка) > 0 then
      Begin
        Выбор := Действие;
//        ShowMessage('Действие');
      End;

    if (Pos('=',Исходная_строка) = 0) And (Pos(':',Исходная_строка) = 0) then
      Begin
        if (Pos(')',Исходная_строка) <> 0) And (Pos('ТАЙМЕР',Исходная_строка) = 0)
        then
        Begin
        Выбор := Подпрограмма;
//        ShowMessage('Подпрограмм');
        End;
      End;

    if (Pos('()',Исходная_строка) <> 0) then
        Begin
        Выбор := Подпрограмма_без_параметров;
//        ShowMessage('Подпрограмма_без_параметров');
        End;
    if (Pos('ТАЙМЕР',Исходная_строка) <> 0) then
        Begin
        Выбор := Таймер;
//        ShowMessage('Таймер');
        End;

    if Pos('ЕСЛИ',Исходная_строка) <> 0 then
      Begin
        Выбор := Условие;
//        ShowMessage('Условие');
      End;
    if StrToIntDef(Исходная_строка,1) <> 1 then
      Begin
        Выбор := Переход;
//        ShowMessage('Переход');
      End;
  case Выбор of
    Действие:  Begin
                 Длина_имени := Pos('=',Исходная_строка);
                 Имя := Copy(Исходная_строка,1,Длина_имени - 1);
                 Формула := Copy(Исходная_строка,Длина_имени + 1,Length(Исходная_строка) - Длина_имени);
                 if Формула = '1' then Writeln(Алгоритмы__,Имя + '= True;');
                 if Формула = '0' then Writeln(Алгоритмы__,Имя + '= False;');
                 if (Формула <> '1') And (Формула <> '0') then Writeln(Алгоритмы__,Имя + '= ' + Формула + ';' );
                 if (Pos(Имя + ',',Переменные_) = 0)
//                 and (Pos('Т',Имя) <> 1)
                 then
                    Begin
                      Переменные_:=Переменные_  + Имя + ',';
                      Writeln(Переменные_алгоритмов,Имя + ',');
//                      if (Pos('ФР',Имя) = 1) or (Pos('НН',Имя) = 1)
//                       then
//                          Begin
//                            Writeln(OBN_FR_HH,Имя + ' := False;');
//                          End;
                    End;
                 Выбор := Нет_выбора;
               end;
    Условие:   Begin
                  Формула := Copy(Исходная_строка,5,Pos('ТО ',Исходная_строка) - 5);
//                  ShowMessage(Формула);
                      if Pos('*',Формула) <> 0 then
                        Begin
                        Номер_символа := 1;
                        while Номер_символа <> 0 do
                            Begin
                              Номер_символа := Pos('*',Формула);
                              if Pos('*',Формула) = 0 then  break;
                              Delete(Формула,Номер_символа,1);
                              Insert(' And ',Формула,Номер_символа);
                            End;
                        End;
                      if Pos('+',Формула) <> 0 then
                        Begin
                        Номер_символа := 1;
                        while Номер_символа <> 0 do
                            Begin
                              Номер_символа := Pos('+',Формула);
                              if Pos('+',Формула) = 0 then  break;
                              Delete(Формула,Номер_символа,1);
                              Insert(' Or ',Формула,Номер_символа);
                            End;
                        End;
                      if Pos('^',Формула) <> 0 then
                        Begin
                        Номер_символа := 1;
                        while Номер_символа <> 0 do
                            Begin
                              Номер_символа := Pos('^',Формула);
                              if Pos('^',Формула) = 0 then  break;
                              Delete(Формула,Номер_символа,1);
                              Insert(' Not ',Формула,Номер_символа);
                            End;
                        End;
                        Insert('Блок := ',Исходная_строка, Pos('ТО ',Исходная_строка)+3);
                  Insert('Блок := ',Исходная_строка, Pos('ИНАЧЕ',Исходная_строка)+5);
                  Delete(Исходная_строка,5,Pos('ТО ',Исходная_строка)-5);
                  Insert(Формула,Исходная_строка, 5);
                  while Pos('And',Формула) <> 0 do
                    Begin
                    Insert(',',Формула,Pos('And',Формула));
                    Delete(Формула,Pos('And',Формула),3);
                    End;
                  while Pos('Or',Формула) <> 0 do
                    Begin
                    Insert(',',Формула,Pos('Or',Формула));
                    Delete(Формула,Pos('Or',Формула),2);
                    End;
                  while Pos('Not',Формула) <> 0 do
                    Begin
                    Insert(',',Формула,Pos('Not',Формула));
                    Delete(Формула,Pos('Not',Формула),3);
                    End;
                  while Pos('(',Формула) <> 0 do
                    Begin
                    Insert(',',Формула,Pos('(',Формула));
                    Delete(Формула,Pos('(',Формула),1);
                    End;
                  while Pos(')',Формула) <> 0 do
                    Begin
                    Insert(',',Формула,Pos(')',Формула));
                    Delete(Формула,Pos(')',Формула),1);
                    End;

                  while Pos(' ',Формула) <> 0 do
                    Begin
                    Delete(Формула,Pos(' ',Формула),1);
                    End;

                  while Pos(',,',Формула) <> 0 do
                    Begin
                    Delete(Формула,Pos(',,',Формула),1);
                    End;
                  while Pos(',,,',Формула) <> 0 do
                    Begin
                    Delete(Формула,Pos(',,,',Формула),2);
                    End;

                  if Pos(',',Формула) = 0 then
                    Begin
                    Имя:= Формула;
//                    ShowMessage(Имя);
                    if Pos(Имя + ',',Переменные_) = 0 then
                    Begin
                    Переменные_:=Переменные_  + Имя + ',';
                    Writeln(Переменные_алгоритмов,Имя + ',');
                    End;
                    End;
                  while Pos(',',Формула) <> 0 do
                    Begin
                    Имя:= Copy(Формула,1,Pos(',',Формула)-1);
//                    ShowMessage(Имя);
                    if Pos(Имя + ',',Переменные_) = 0 then
                      Begin
                        Переменные_:=Переменные_  + Имя + ',';
                        If Имя <> '' Then Writeln(Переменные_алгоритмов,Имя + ',');
                        Delete(Формула,1,Pos(',',Формула));
                      End
                      Else Delete(Формула,1,Pos(',',Формула));
                    End;
                  Имя:= Формула;
//                  ShowMessage(Имя);
                  If (Имя <> '') And (Pos(Имя + ',',Переменные_) = 0) Then
                    Begin
                      Переменные_ := Переменные_  + Имя + ',';
                      Writeln(Переменные_алгоритмов,Имя + ',');
                    End;

                  if Pos('ЕСЛИ',Исходная_строка) <> 0 then
                    Begin
                          Номер_символа := Pos('ЕСЛИ',Исходная_строка);
                          Delete(Исходная_строка,1,4);
                          Insert(' If ',Исходная_строка,1);
                    End;
                  if Pos('ТО',Исходная_строка) <> 0 then
                    Begin
                          Номер_символа := Pos('ТО ',Исходная_строка);
                          Delete(Исходная_строка,Номер_символа,3);
                          Insert(' Then ',Исходная_строка,Номер_символа);
                    End;
                  if Pos('ИНАЧЕ',Исходная_строка) <> 0 then
                    Begin
                          Номер_символа := Pos('ИНАЧЕ',Исходная_строка);
                          Delete(Исходная_строка,Номер_символа,5);
                          Insert(' Else ',Исходная_строка,Номер_символа);
                    End;
                  Writeln(Алгоритмы__,Исходная_строка + ';');
                  Выбор := Нет_выбора
               End;
    Переход:   Begin
                   Writeln(Алгоритмы__,'Блок = ' + Исходная_строка + ';');
                   Выбор := Нет_выбора
               End;
    Подпрограмма:Begin
                   Имя_параметра := Copy(Исходная_строка,Pos('(',Исходная_строка)+1,Pos(',',Исходная_строка)- Pos('(',Исходная_строка)-1);
                   Delete(Исходная_строка,Length(Исходная_строка),1);
                   Исходная_строка := Исходная_строка + ',''' + Имя_параметра + ' = '',0)';
                   Writeln(Алгоритмы__,Исходная_строка + ';');
                   if Имя_параметра <> '' then

                   if (Pos(Имя_параметра + ',',Переменные_) = 0)
//                    and (Pos('Т',Имя_параметра) <> 1)
                    then
                    Begin
                      Переменные_:=Переменные_  + Имя_параметра + ',';
                      Writeln(Переменные_алгоритмов,Имя_параметра + ',');
                    End;
                   Выбор := Нет_выбора
               End;
    Подпрограмма_без_параметров:Begin
                   Номер_символа := Length(Исходная_строка);
                   Delete(Исходная_строка,Номер_символа - 1,2);
                   Writeln(Алгоритмы__,Исходная_строка + ';');
                   Выбор := Нет_выбора
               End;
    Таймер:Begin
                   Insert('MainForm.',Исходная_строка,Pos('(',Исходная_строка)+1);
                   Writeln(Алгоритмы__,Исходная_строка + ';');
                   Выбор := Нет_выбора
               End;
    Метка:     Begin
                   Длина_имени := Pos(':',Исходная_строка);
                   Имя_метки := Copy(Исходная_строка,1,Длина_имени - 1);
                   If Имя_метки <> '1' Then Writeln(Алгоритмы__,'};');
                   Writeln(Алгоритмы__,Исходная_строка + '{ Ранг = 2;');
                   Выбор := Нет_выбора
               End;
    Нач:       Begin
                   Имя_алгоритма := Copy(Исходная_строка,5,Length(Исходная_строка) - 4);
                   //Writeln(Алгоритмы__,'Procedure ' + Имя_алгоритма + ';');
                   //Writeln(Алгоритмы__,'Begin');
                   //Writeln(Алгоритмы__,'Запись_ФС(0,''' + 'Начало: ' + Имя_алгоритма + ''');');
                   //Writeln(Алгоритмы__,'Блок := 1;');
                   //Writeln(Алгоритмы__,'Блоки_выполнены := False;');
                   //Writeln(Алгоритмы__,'while not Блоки_выполнены do');
                   //Writeln(Алгоритмы__,'Begin');
                   //Writeln(Алгоритмы__,'case Блок of');
                   Writeln(Алгоритмы__,Имя_алгоритма + '()');
                   Writeln(Алгоритмы__,'{');
                      Writeln(Алгоритмы__,'Запись_ФС(0,''' + 'Начало: ' + Имя_алгоритма + ''');');
                      Writeln(Алгоритмы__,'Блок = 1;');
                      Writeln(Алгоритмы__,'Блоки_выполнены = False;');
                      Writeln(Алгоритмы__,'while(!Блоки_выполнены)');
                        Writeln(Алгоритмы__,'{');
                          Writeln(Алгоритмы__,'case Блок of');
                   Выбор := Нет_выбора
               End;
    Кон:       Begin
                   Имя_алгоритма := Copy(Исходная_строка,5,Length(Исходная_строка) - 4);
                        Writeln(Алгоритмы__,'// Запись_ФС(0,''' + 'Конец: ' + Имя_алгоритма + ''');');
                        Writeln(Алгоритмы__,'Блоки_выполнены = True;');
                        Writeln(Алгоритмы__,'};');
                   Writeln(Алгоритмы__,'};');
                   Writeln(Алгоритмы__,'};');
                   Writeln(Алгоритмы__,'Блоки_выполнены = False;');
                   Writeln(Алгоритмы__,'};');
                   Выбор := Нет_выбора
               End;
    Ком:       Begin
                   Комментарий := Copy(Исходная_строка,5,Length(Исходная_строка) - 4);
                   Writeln(Алгоритмы__,'// ' + Комментарий);
                   Выбор := Нет_выбора
               End;
//    else ShowMessage('Неверный выбор!');
  End;
  End;
  End;
    Writeln(Переменные_алгоритмов,'Акунович');
    ShowMessage('Преобразованы  Алгоритмы!');
    CloseFile(Алгоритмы);
    CloseFile(Алгоритмы__);
    CloseFile(Переменные_алгоритмов);
    CloseFile(Сигналы_срабатывания_таймеров);
end;

end.



